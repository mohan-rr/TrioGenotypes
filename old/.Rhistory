na.strings = "0",
cov.file.in = covfile)
prepdata <- genDataPreprocess(data.in = gendata,
map.file = mapfile,
design = "triad", ncpu = 6,
file.out = "mat_folate", dir.out = tempdir())
mat_folate <- haplinSlide(prepdata, design = "triad", use.missing = TRUE, maternal = TRUE, strata = "folate", response = "mult", reference = "ref.cat", winlength = 1)
mat_folate <- toDataFrame(mat_folate, reduce=FALSE)
mapfile = read.table(mapfile)
mat_folate$SNP <- mapfile[,2]
mat_folate$SNP <- rep(mapfile[,2], each=6)
View(mat_folate)
length(unique(mat_folate$element))
table(mat_folate$element)
#maternal smoke
covfile = "../../../NewAnalyses/New_Cleft_Haplin_Analysis/Input_and_Output_Files/maternal_smoke_OFC.txt"
mapfile = "./maternal_smoke.map"
gendata  <- genDataRead(file.in = "./maternal_smoke.ped",
file.out = "mat_smoke",
map.file = mapfile,
dir.out = tempdir(),
format = "ped", n.vars = 6,
na.strings = "0",
cov.file.in = covfile)
prepdata <- genDataPreprocess(data.in = gendata,
map.file = mapfile,
design = "triad", ncpu = 6,
file.out = "mat_smoke", dir.out = tempdir())
mat_smoke <- haplinSlide(prepdata, design = "triad", use.missing = TRUE, maternal = TRUE, ncpu = 6,
strata = "smoke", response = "mult", reference = "ref.cat", winlength = 1)
mat_smoke <- toDataFrame(mat_smoke, reduce=FALSE)
save(mat_smoke, file="./mat_smoke.Rdata")
#maternal folate
covfile = "../../../NewAnalyses/New_Cleft_Haplin_Analysis/Input_and_Output_Files/maternal_folate_OFC.txt"
mapfile = "./maternal_folate.map"
gendata  <- genDataRead(file.in = "./maternal_folate.ped",
file.out = "mat_folate",
map.file = mapfile,
dir.out = tempdir(),
format = "ped", n.vars = 6,
na.strings = "0",
cov.file.in = covfile)
prepdata <- genDataPreprocess(data.in = gendata,
map.file = mapfile,
design = "triad", ncpu = 6,
file.out = "mat_folate", dir.out = tempdir())
mat_folate <- haplinSlide(prepdata, design = "triad", use.missing = TRUE, maternal = TRUE, strata = "folate", response = "mult", reference = "ref.cat", winlength = 1)
mat_folate <- toDataFrame(mat_folate, reduce=FALSE)
save(mat_folate, file="./mat_folate.Rdata")
#poo smoke
covfile = "../../../NewAnalyses/New_Cleft_Haplin_Analysis/Input_and_Output_Files/parental_smoke_OFC.txt"
mapfile = "./parent_smoke.map"
gendata  <- genDataRead(file.in = "./parent_smoke.ped",
file.out = "poo_smoke",
map.file = mapfile,
dir.out = tempdir(),
format = "ped", n.vars = 6,
na.strings = "0",
cov.file.in = covfile)
prepdata <- genDataPreprocess(data.in = gendata,
map.file = mapfile,
design = "triad", ncpu = 6,
file.out = "poo_smoke", dir.out = tempdir())
poo_smoke <- haplinSlide(prepdata, design = "triad", use.missing = TRUE, maternal = TRUE, poo = TRUE, strata = "smoke", response = "mult", reference = "ref.cat", winlength = 1)
library(readr)
library(dplyr)
library(ggplot2)
library(knitr)
library(poolr)
# library(matrixcalc)
library(STAAR)
library(ggnewscale)
library(ggsci)
#-----------GGPLOT THEME------------------
my_theme <- function()
{
res <- theme(
axis.ticks.x = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major.y = element_line(linetype = "dotted", color = "grey"),
panel.background = element_rect(fill = "white"),
legend.position = "bottom")
res
}
#------------PLOTTING FUNCTION-----------------
make_plot <- function(df, LD_matrix, prune_list, title){
df <- na.omit(df)
pruned_results <- df[df$snp %in% prune_list,]
df <- df[order(df$chr, df$position),]
#add a distance column to help plot the x-axis
df <- df %>% group_by(region) %>% summarise(start_BP = min(position)) %>% left_join(df , . , by=c("region"="region"))
df$distance <- df$position - df$start_BP
increment <- (df %>% group_by(region) %>% summarise(increment = max(distance)))$increment
increment <- c(0, head(increment, -1) + 1000)
increment <- cumsum(increment)
df$distance <- df$distance + rep(increment, as.vector(table(df$region)))
#put the x axis labels in the right spot
xaxis <- df %>% group_by(region) %>%
summarise(center=(max(distance) + min(distance))/2)
extra_layer <- df %>% group_by(region) %>%
summarise (Cauchy = CCT(pval),
Pseudo_replicate = fisher(pval, adjust="empirical", R = LD_matrix[unname(snp), unname(snp)])$p)
# summarise (Fisher = fisher(pval)$p,
#            Nyholt = fisher(pval, adjust="nyholt", R = LD_matrix[unname(snp), unname(snp)])$p,
#            Brown  = fisher(pval, adjust="generalized", R = LD_matrix[unname(snp), unname(snp)])$p,
#            Cauchy = CCT(pval))
extra_layer <- pruned_results %>% group_by(region) %>%
summarise(Fisher = fisher(pval)$p) %>%
left_join(extra_layer, . , by="region")
# summarise(Fisher_prune = fisher(pval)$p,
#           Nyholt_prune = fisher(pval, adjust="nyholt",
#                                 R = LD_matrix[unname(snp), unname(snp)])$p) %>%
# left_join(extra_layer, . , by="region")
#
extra_layer <- extra_layer %>% tidyr::pivot_longer(c(!region), names_to="pooled", values_to="pval")
extra_layer <- xaxis %>% left_join(extra_layer, . , by="region")
p <-ggplot(df, aes(x=distance, y=-log10(pval))) + #ggplot(df, aes(x=distance, y=-log10(pval), text=text)) + #
geom_point(aes(color=region, alpha=0.7)) +
geom_point(data=extra_layer, aes(x=center, y=-log10(pval), shape=pooled), color="black") +
geom_hline(yintercept=-log10(0.05), linetype="dashed", color = "#071E22") +
geom_hline(yintercept=-log10(0.05/length(unique(df$region))), linetype="dashed", color = "#679289") +
geom_hline(yintercept=-log10(0.05/nrow(df)), linetype="dashed", color = "#F4C095") +
scale_color_manual(values=rep(c("#DF8F4499","#79AF9799"), length(unique(df$region))/2 + 1)) +
scale_x_continuous(label=xaxis$region, breaks=xaxis$center) + ylim(c(0,5)) +
my_theme() + guides(color="none", alpha="none") +  labs(title=title, x="region", shape="")
# ggplotly(p,tooltip="text")
# ggplotly(p,tooltip="text")
return(p)
}
# #---------------READ DATA (MATERNAL SNPs, LD MATRIX)-------------------------
# mat <- read_table("../../NewAnalyses/New_Cleft_Haplin_Analysis/Input_and_Output_Files/mat_info.txt")
# mat <- mat[mat$snp %in% m_keep, ]
# mat <- mat[order(mat$chr, mat$position),]
# mat$region <- rep(c("chr1\nr1","chr2\nr2/3","chr3\nr4","chr3\nr5","chr5\nr6","chr6\nr7","chr10\nr8","chr10\nr9","chr13\nr10","chr14\nr11","chr14\nr12","chr17\nr13","chr19\nr14"),
#                   c(21,31,23,36,12,26,23,14,34,12,15,31,18))
# mat$region <- factor (mat$region, levels = c("chr1\nr1","chr2\nr2/3","chr3\nr4","chr3\nr5","chr5\nr6","chr6\nr7","chr10\nr8","chr10\nr9","chr13\nr10","chr14\nr11","chr14\nr12","chr17\nr13","chr19\nr14"))
#
# mat_LD_matrix <- as.matrix(read_tsv("./maternal.ld", col_names=FALSE))
# mat_SNPs = as.vector(read_table('./maternal.in', col_names=FALSE)[[1]])
# rownames(mat_LD_matrix) <- mat_SNPs
# colnames(mat_LD_matrix) <- mat_SNPs
#
# #--------------READ DATA (POO SNPs, LD MATRIX) -------------------------------
# p_origin <- read_table("../../NewAnalyses/New_Cleft_Haplin_Analysis/Input_and_Output_Files/poo_info.txt")
# p_origin <- p_origin[p_origin$snp %in% p_keep,]
# p_origin <- p_origin[order(p_origin$chr, p_origin$position),]
# p_origin$region <- rep(c("chr1\nr1","chr1\nr2","chr1\nr3","chr1\nr4","chr2\nr5","chr4\nr6/7","chr5\nr8","chr6\nr9","chr8\nr10","chr9\nr11","chr9\nr12","chr12\nr13","chr14\nr14","chr14\nr15/16","chr16\nr17"),
#                        c(18,9,12,19,18,11,28,21,62,22,12,23,31,19,28))
# p_origin$region <- factor(p_origin$region, levels = c("chr1\nr1","chr1\nr2","chr1\nr3","chr1\nr4","chr2\nr5","chr4\nr6/7","chr5\nr8","chr6\nr9","chr8\nr10","chr9\nr11","chr9\nr12","chr12\nr13","chr14\nr14","chr14\nr15/16","chr16\nr17") )
#
# p_LD_matrix <- as.matrix(read_tsv("./parental.ld", col_names=FALSE))
# p_SNPs = as.vector(read_table('./p_origin.in', col_names=FALSE)[[1]])
# rownames(p_LD_matrix) <- p_SNPs
# colnames(p_LD_matrix) <- p_SNPs
#--------------- load pre-processed data ------------------------------
m_keep <- read_table("maternal.in", col_names = FALSE)[[1]]
p_keep <- read_table("p_origin.in", col_names=FALSE)[[1]]
load("mat.Rdata")
load("p_origin.Rdata")
load("m_LD1.Rdata")
load("p_LD1.Rdata")
mat <- mat[mat$impute > 0.8, ]
p_origin <- p_origin[p_origin$impute > 0.8 , ]
imputation_quality <- function(df, LD_matrix, prune_list, title){
df <- na.omit(df)
pruned_results <- df[df$snp %in% prune_list,]
df <- df[order(df$chr, df$position),]
#add a distance column to help plot the x-axis
df <- df %>% group_by(region) %>% summarise(start_BP = min(position)) %>% left_join(df , . , by=c("region"="region"))
df$distance <- df$position - df$start_BP
increment <- (df %>% group_by(region) %>% summarise(increment = max(distance)))$increment
increment <- c(0, head(increment, -1) + 1000)
increment <- cumsum(increment)
df$distance <- df$distance + rep(increment, as.vector(table(df$region)))
#put the x axis labels in the right spot
xaxis <- df %>% group_by(region) %>%
summarise(center=(max(distance) + min(distance))/2)
# get pooled values
extra_layer <- df %>% group_by(region) %>%
summarise (Cauchy = CCT(pval),
Pseudo_replicate = fisher(pval, adjust="empirical", R = LD_matrix[unname(snp), unname(snp)])$p)
extra_layer <- pruned_results %>% group_by(region) %>%
summarise(Fisher = fisher(pval)$p) %>%
left_join(extra_layer, . , by="region")
#turn dataframe long
extra_layer <- extra_layer %>% tidyr::pivot_longer(c(!region), names_to="pooled", values_to="pval")
extra_layer <- xaxis %>% left_join(extra_layer, . , by="region")
p <-ggplot(df, aes(distance, -log10(pval))) +
geom_point(data=df[df$region %in% unique(df$region)[c(T,F)],], mapping = aes(x=distance, y=-log10(pval), color = impute)) +
geom_point(data=df[df$region %in% unique(df$region)[c(F,T)],], mapping = aes(x=distance, y=-log10(pval), color = impute), shape = 8) +
geom_point(data=extra_layer, aes(x=center, y=-log10(pval), shape=pooled), color="black") +
scale_colour_stepsn(breaks = c(0.4, 0.6, 0.8), colours = pal_locuszoom("default")(5)) +
geom_hline(yintercept=-log10(0.05), linetype="dashed", color = "black") +
geom_hline(yintercept=-log10(0.05/length(unique(df$region))), linetype="dashed", color = "black") +
ylim(c(0,4)) + my_theme() +  labs(title=title, x="region", shape="") +
scale_x_continuous(label=xaxis$region, breaks=xaxis$center)
return(p)
}
LD_lead_SNP <- function(df, LD_matrix, prune_list, title){
df <- na.omit(df)
pruned_results <- df[df$snp %in% prune_list,]
df <- df[order(df$chr, df$position),]
#add a distance column to help plot the x-axis
df <- df %>% group_by(region) %>% summarise(start_BP = min(position)) %>% left_join(df , . , by=c("region"="region"))
df$distance <- df$position - df$start_BP
increment <- (df %>% group_by(region) %>% summarise(increment = max(distance)))$increment
increment <- c(0, head(increment, -1) + 1000)
increment <- cumsum(increment)
df$distance <- df$distance + rep(increment, as.vector(table(df$region)))
#put the x axis labels in the right spot
xaxis <- df %>% group_by(region) %>%
summarise(center=(max(distance) + min(distance))/2)
# get pooled values
extra_layer <- df %>% group_by(region) %>%
summarise (Cauchy = CCT(pval),
Empirical = fisher(pval, adjust="empirical", R = LD_matrix[unname(snp), unname(snp)])$p)
extra_layer <- pruned_results %>% group_by(region) %>%
summarise(Fisher = fisher(pval)$p) %>%
left_join(extra_layer, . , by="region")
#turn dataframe long
extra_layer <- extra_layer %>% tidyr::pivot_longer(c(!region), names_to="pooled", values_to="pval")
extra_layer <- xaxis %>% left_join(extra_layer, . , by="region")
LDvec <- c()
for (region in levels(df$region)){
subdf   <- df[df$region == region,]
snps    <- subdf$snp
leadSNP <- subdf[which(subdf$pval == min(subdf$pval)), "snp"][1]
LDvec   <- c(LDvec, unname(LD_matrix[leadSNP, snps]))
}
df$LD <- LDvec^2
p <-ggplot(df, aes(distance, -log10(pval), color=LD)) +
geom_point(data=df[df$region %in% unique(df$region)[c(T,F)],], mapping = aes(x=distance, y=-log10(pval))) +
geom_point(data=df[df$region %in% unique(df$region)[c(F,T)],], mapping = aes(x=distance, y=-log10(pval)), shape=8) +
geom_point(data=extra_layer, aes(x=center, y=-log10(pval), shape=pooled), color="black") +
scale_colour_stepsn(breaks = c(0.4, 0.6, 0.8), colours = pal_locuszoom("default")(5)) +
geom_hline(yintercept=-log10(0.05), linetype="dashed", color = "#071E22") +
geom_hline(yintercept=-log10(0.05/length(unique(df$region))), linetype="dashed", color = "#679289") +
geom_hline(yintercept=-log10(0.05/nrow(df)), linetype="dashed", color = "#F4C095") +
ylim(c(0,5)) + my_theme() +  labs( x="region", shape="") +
scale_x_continuous(label=xaxis$region, breaks=xaxis$center)
return(p)
}
haplin_results <- read_table("../../NewAnalyses/New_Cleft_Haplin_Analysis/Input_and_Output_Files/maternal_smoke_CLPP_haplin.txt")
haplin_results <- merge(mat, haplin_results[,c("snp", "maternal_effectRR", "gxe_smoke_mat", "maf", "no_env_mat_RR", "env_mat_RR")], by="snp")
names(haplin_results)[names(haplin_results) == 'gxe_smoke_mat'] <- 'pval'
p_A <- LD_lead_SNP(haplin_results, m_LD1, m_keep, "")
legend <- cowplot::get_legend(p_A + theme(legend.box.margin = margin(0, 0, 0, 0)))
haplin_results <- read_table("../../NewAnalyses/New_Cleft_Haplin_Analysis/Input_and_Output_Files/maternal_folate_CLPP_haplin.txt")
haplin_results <- merge(mat, haplin_results[,c("snp", "maternal_effectRR", "gxe_folate_mat", "maf", "no_env_mat_RR", "env_mat_RR")], by="snp")
# # haplin_results$qval <- p.adjust(haplin_results$gxe_folate_mat, method="fdr")
names(haplin_results)[names(haplin_results) == 'gxe_folate_mat'] <- 'pval'
p_B <- LD_lead_SNP(haplin_results, m_LD1, m_keep, "")
plot <- cowplot::plot_grid(p_A + theme(legend.position="none"), p_B + theme(legend.position="none"), ncol=1, labels=c("A","B"))
plot <- cowplot::plot_grid(plot, legend, ncol=1, rel_heights = c(1,0.1))
cowplot::ggsave2("./plots_and_tables/figure1_CLPP.pdf", plot)
haplin_results <- read_table("../../NewAnalyses/New_Cleft_Haplin_Analysis/Input_and_Output_Files/maternal_smoke_CPO_haplin.txt")
haplin_results <- merge(mat, haplin_results[,c("snp", "maternal_effectRR", "gxe_smoke_mat", "maf", "no_env_mat_RR", "env_mat_RR")], by="snp")
names(haplin_results)[names(haplin_results) == 'gxe_smoke_mat'] <- 'pval'
p_A <- LD_lead_SNP(haplin_results, m_LD1, m_keep, "")
legend <- cowplot::get_legend(p_A + theme(legend.box.margin = margin(0, 0, 0, 0)))
haplin_results <- read_table("../../NewAnalyses/New_Cleft_Haplin_Analysis/Input_and_Output_Files/maternal_folate_CPO_haplin.txt")
haplin_results <- merge(mat, haplin_results[,c("snp", "maternal_effectRR", "gxe_folate_mat", "maf", "no_env_mat_RR", "env_mat_RR")], by="snp")
# # haplin_results$qval <- p.adjust(haplin_results$gxe_folate_mat, method="fdr")
names(haplin_results)[names(haplin_results) == 'gxe_folate_mat'] <- 'pval'
p_B <- LD_lead_SNP(haplin_results, m_LD1, m_keep, "")
plot <- cowplot::plot_grid(p_A + theme(legend.position="none"), p_B + theme(legend.position="none"), ncol=1, labels=c("A","B"))
plot <- cowplot::plot_grid(plot, legend, ncol=1, rel_heights = c(1,0.1))
cowplot::ggsave2("./plots_and_tables/figure1_CPO.pdf", plot)
haplin_results <- read_table("../../NewAnalyses/New_Cleft_Haplin_Analysis/Input_and_Output_Files/parental_smoke_CLPP_haplin.txt")
haplin_results <- merge(p_origin, haplin_results[,c("snp", "gxe_smoke_poo", "env_poo_RR", "no_env_poo_RR")], by="snp")
haplin_results <- rename(haplin_results, 'pval'='gxe_smoke_poo', 'no_env_RR'='no_env_poo_RR', 'env_RR'='env_poo_RR')
p_A <- LD_lead_SNP(haplin_results, p_LD1, p_keep, "")
legend <- cowplot::get_legend(p_A + theme(legend.box.margin = margin(0, 0, 0, 0)))
haplin_results <- read_table("../../NewAnalyses/New_Cleft_Haplin_Analysis/Input_and_Output_Files/parental_folate_CLPP_haplin.txt")
haplin_results <- merge(p_origin, haplin_results[,c("snp", "gxe_folate_poo", "env_poo_RR", "no_env_poo_RR")], by="snp")
haplin_results <- rename(haplin_results, 'pval'='gxe_folate_poo', 'no_env_RR'='no_env_poo_RR', 'env_RR'='env_poo_RR')
p_B <- LD_lead_SNP(haplin_results, p_LD1, p_keep, "")
plot <- cowplot::plot_grid(p_A + theme(legend.position="none"), p_B + theme(legend.position="none"), ncol=1, labels=c("A","B"))
plot <- cowplot::plot_grid(plot, legend, ncol=1, rel_heights = c(1,0.1))
cowplot::ggsave2("figure2_CLPP.pdf", plot)
haplin_results <- read_table("../../NewAnalyses/New_Cleft_Haplin_Analysis/Input_and_Output_Files/parental_smoke_CPO_haplin.txt")
haplin_results <- merge(p_origin, haplin_results[,c("snp", "gxe_smoke_poo", "env_poo_RR", "no_env_poo_RR")], by="snp")
haplin_results <- rename(haplin_results, 'pval'='gxe_smoke_poo', 'no_env_RR'='no_env_poo_RR', 'env_RR'='env_poo_RR')
p_A <- LD_lead_SNP(haplin_results, p_LD1, p_keep, "")
legend <- cowplot::get_legend(p_A + theme(legend.box.margin = margin(0, 0, 0, 0)))
haplin_results <- read_table("../../NewAnalyses/New_Cleft_Haplin_Analysis/Input_and_Output_Files/parental_folate_CPO_haplin.txt")
haplin_results <- merge(p_origin, haplin_results[,c("snp", "gxe_folate_poo", "env_poo_RR", "no_env_poo_RR")], by="snp")
haplin_results <- rename(haplin_results, 'pval'='gxe_folate_poo', 'no_env_RR'='no_env_poo_RR', 'env_RR'='env_poo_RR')
p_B <- LD_lead_SNP(haplin_results, p_LD1, p_keep, "")
plot <- cowplot::plot_grid(p_A + theme(legend.position="none"), p_B + theme(legend.position="none"), ncol=1, labels=c("A","B"))
plot <- cowplot::plot_grid(plot, legend, ncol=1, rel_heights = c(1,0.1))
cowplot::ggsave2("figure2_CPO.pdf", plot)
x <- sample(c(TRUE, FALSE), size=100, replace=TRUE)
x
which(x)
which(x)[25]
x[1:44]
sum(x[1:44])
y <- vector(mode="list", length = 10)
y[[1]]
is.null(y[[1]])
names(y) <- paste0("qwe", c(1:10))
names(y)
tt <- matrix(data = 1:250, nrow=25, col=10)
tt <- matrix(data = 1:250, nrow=25, ncol=10)
View(tt)
tx <- matrix(data=1:250, nrow=25, ncol= 10)
View(rbind(tt,tx))
rbind(NULL, tt)
rbind(y[[1]], tt)
y[[1]] <- rbind(y[[1]], tt)
View(y)
y <- list(list(c(NULL, NULL)))
View(y)
y <- list(rep(list(c(NULL, NULL)), 10))
View(y)
y <- rep(list(c(NULL, NULL)), 10)
View(y)
file.exists(paste0("./dir", 1:10, "/testit.txt"))
library(GENLIB)
g1 <- data.frame(ind    = c(1,2,3,4,5,6,7,8),
father = c(0,0,1,1,0,0,5,6),
mother = c(0,0,2,2,0,0,3,4),
sex    = c(1,2,2,2,1,1,1,1))
gen.genealogy(g1)
gen.phi(g1)
qqq <- gen.genealogy(g1)
gen.genealogy(qqq)
gen.phi(qqq)
x <- gen.phi(qqq)
x
gen.graph(G1)
gen.graph(qqq)
gen.graph(qqq)
is.unsorted(c(4,3,2,1))
is.unsorted(c(1,2,3,4))
4^2
getwd()
normalizePath("./main.pdf")
normalizePath("../Desktop/")
normalizePath("../Desktop/bitrue.txt")
getwd()
x <- getwd()
paste(x,"/gendrop.ped")
paste0(x,"/gendrop.ped")
normalizePath(paste0(x,"/gendrop.ped"))
normalizePath(paste0(x,"/gendrop.ped"), mustWork=FALSE)
rpois(10, 10)
rbinom(2,10,0.30)
rbinom(10,2,0.30)
rownames <- c("ABA", "CCC", "DEF", "PEG", "ELE", "TRE", "RETARD")
grep("^.[E]", rownames)
getwd()
normalizePath(getwd())
letters
LETTERS
t <- 1:10
t <- rep(t, each=2)
t = t * c(1, -1)
t
99 %% 10
cumsum(1:10 * 9)
g1k <- read.table("g1k_CEU.afreq")
geneva <- read.table("GENEVA_CLP_euro.afreq")
#the geneva file includes mitochondrial and sex chromosomes
#g1k file only has SNPs that are present in the GENEVA file
print(paste(nrow(g1k), nrow(geneva)))
#select only the SNPs that were in 1000 genomes from GENEVA
geneva <- geneva[geneva$V2 %in% g1k$V2, ]
#remove any non-polymorphic sites
geneva <- geneva[(geneva$V5 != 0) & (! is.na(geneva$V5)), ]
g1k    <- g1k[g1k$V2 %in% geneva$V2, ]
g1k    <- g1k[(g1k$V5 != 0) & (g1k$V5 != 1), ]
print(paste(nrow(g1k), nrow(geneva)))
#the number of rows still don't match up because s
# g1k has some duplicates rsID due to multiple alternate alleles
# remove SNPs where there is multiple alt alleles in the
dupes  <- table(g1k$V2)
dupes  <- dupes[dupes > 1]
dupes  <- g1k[g1k$V2 %in% names(dupes), ]
g1k    <- g1k[! g1k$V2 %in% dupes$V2, ]
geneva <- geneva[geneva$V2 %in% g1k$V2, ]
print(paste(nrow(g1k), nrow(geneva)))
alleles <- data.frame(rsid = g1k$V2, g1k = paste0(g1k$V3,g1k$V4),
geneva = paste0(geneva$V3, geneva$V4), g1k_MAF = g1k$V5,
geneva_MAF = geneva$V5)
rm(dupes, g1k, geneva)
gc()
#the ref allele for the geneva files I think is set by PLINK as the most common
# the reason why we have some MAF > 0.50 would then be because I took a subset of the original PLINK files
# only using the CL/P european trios , but the population as whole might have the other allele as more frequent
# can double chekc this later easily, doesn't really matter
sum(alleles$g1k_MAF    > 0.50) / nrow(alleles)
sum(alleles$geneva_MAF > 0.50) / nrow(alleles)
#split the dataframe into the alleles that already match up (assume it's a true match for now, look into it further later),
# and into alleles that don't match up
check_alleles <- alleles[alleles$g1k != alleles$geneva,]
alleles       <- alleles[alleles$g1k == alleles$geneva,]
sprintf('%i  %i', nrow(check_alleles), nrow(alleles))
#first though we have to remove any SNVs that are 'base-pair variants'
#bc these variants (which are not many in the GENEVA set) can't be distinguished
#between a strand flip and a ref flip
base_pair_snv <- c("AT","TA","CG","GC")
check_alleles <- check_alleles [ ! check_alleles$geneva %in% base_pair_snv, ]
check_alleles <- check_alleles [ ! check_alleles$g1k %in% base_pair_snv, ]
# now check for strand flips, ref allele flips, and strand + ref flip.
# note: do a speed test later for repeated small vector look-ups...no way this is efficient
# how do the function environments work?:
#  - If define the vector inside the function it's reallocated every function call?
#  - if define outside it has to do namespace lookup every call?
strand_flip <- function(a1, a2){
SNVs <- c("CT", "CA", "TC", "TG", "GA", "GT", "AG", "AC")
return ((which(a1 == SNVs) %% 4) == (which(a2 == SNVs) %%4))
}
ref_flip <- function(a1, a2){
SNVs <- c("CT", "CA", "GA", "TG", "TC", "AC", "AG", "GT")
return ((which(a1 == SNVs) %% 4) == (which(a2 == SNVs) %% 4))
}
both_flip <- function(a1, a2){
SNVs <- c("CT", "CA", "TC", "GT", "AG", "TG", "GA", "AC")
return ((which(a1 == SNVs) %% 4) == (which(a2 == SNVs) %% 4))
}
check_alleles$strand_flip <- mapply(strand_flip, check_alleles$g1k, check_alleles$geneva, SIMPLIFY = TRUE)
check_alleles$ref_flip    <- mapply(ref_flip,    check_alleles$g1k, check_alleles$geneva, SIMPLIFY = TRUE)
check_alleles$both_flip   <- mapply(both_flip,   check_alleles$g1k, check_alleles$geneva, SIMPLIFY = TRUE)
View(check_alleles)
check_alleles$any <- mapply(any, check_alleles$strand_flip, check_alleles$ref_flip, check_alleles$both_flip)
check_alleles[!any , ]
View(check_alleles[! check_alleles$any, ])
View(check_alleles)
check_alleles <- check_alleles[ ! any , ]
check_alleles <- check_alleles[ ! check_alleles$any , ]
g1k <- read.table("g1k_CEU.afreq")
geneva <- read.table("GENEVA_CLP_euro.afreq")
#the geneva file includes mitochondrial and sex chromosomes
#g1k file only has SNPs that are present in the GENEVA file
print(paste(nrow(g1k), nrow(geneva)))
#select only the SNPs that were in 1000 genomes from GENEVA
geneva <- geneva[geneva$V2 %in% g1k$V2, ]
#remove any non-polymorphic sites
geneva <- geneva[(geneva$V5 != 0) & (! is.na(geneva$V5)), ]
g1k    <- g1k[g1k$V2 %in% geneva$V2, ]
g1k    <- g1k[(g1k$V5 != 0) & (g1k$V5 != 1), ]
print(paste(nrow(g1k), nrow(geneva)))
#the number of rows still don't match up because s
# g1k has some duplicates rsID due to multiple alternate alleles
# remove SNPs where there is multiple alt alleles in the
dupes  <- table(g1k$V2)
dupes  <- dupes[dupes > 1]
dupes  <- g1k[g1k$V2 %in% names(dupes), ]
g1k    <- g1k[! g1k$V2 %in% dupes$V2, ]
geneva <- geneva[geneva$V2 %in% g1k$V2, ]
print(paste(nrow(g1k), nrow(geneva)))
alleles <- data.frame(rsid = g1k$V2, g1k = paste0(g1k$V3,g1k$V4),
geneva = paste0(geneva$V3, geneva$V4), g1k_MAF = g1k$V5,
geneva_MAF = geneva$V5)
rm(dupes, g1k, geneva)
gc()
#the ref allele for the geneva files I think is set by PLINK as the most common
# the reason why we have some MAF > 0.50 would then be because I took a subset of the original PLINK files
# only using the CL/P european trios , but the population as whole might have the other allele as more frequent
# can double chekc this later easily, doesn't really matter
sum(alleles$g1k_MAF    > 0.50) / nrow(alleles)
sum(alleles$geneva_MAF > 0.50) / nrow(alleles)
#split the dataframe into the alleles that already match up (assume it's a true match for now, look into it further later),
# and into alleles that don't match up
check_alleles <- alleles[alleles$g1k != alleles$geneva,]
alleles       <- alleles[alleles$g1k == alleles$geneva,]
sprintf('%i  %i', nrow(check_alleles), nrow(alleles))
#first though we have to remove any SNVs that are 'base-pair variants'
#bc these variants (which are not many in the GENEVA set) can't be distinguished
#between a strand flip and a ref flip
base_pair_snv <- c("AT","TA","CG","GC")
check_alleles <- check_alleles [ ! check_alleles$geneva %in% base_pair_snv, ]
check_alleles <- check_alleles [ ! check_alleles$g1k %in% base_pair_snv, ]
# now check for strand flips, ref allele flips, and strand + ref flip.
# note: do a speed test later for repeated small vector look-ups...no way this is efficient
# how do the function environments work?:
#  - If define the vector inside the function it's reallocated every function call?
#  - if define outside it has to do namespace lookup every call?
strand_flip <- function(a1, a2){
SNVs <- c("CT", "CA", "TC", "TG", "GA", "GT", "AG", "AC")
return ((which(a1 == SNVs) %% 4) == (which(a2 == SNVs) %%4))
}
ref_flip <- function(a1, a2){
SNVs <- c("CT", "CA", "GA", "TG", "TC", "AC", "AG", "GT")
return ((which(a1 == SNVs) %% 4) == (which(a2 == SNVs) %% 4))
}
both_flip <- function(a1, a2){
SNVs <- c("CT", "CA", "TC", "GT", "AG", "TG", "GA", "AC")
return ((which(a1 == SNVs) %% 4) == (which(a2 == SNVs) %% 4))
}
check_alleles$strand_flip <- mapply(strand_flip, check_alleles$g1k, check_alleles$geneva, SIMPLIFY = TRUE)
check_alleles$strand_flip <- mapply(strand_flip, check_alleles$g1k, check_alleles$geneva, SIMPLIFY = TRUE)
check_alleles$ref_flip    <- mapply(ref_flip,    check_alleles$g1k, check_alleles$geneva, SIMPLIFY = TRUE)
check_alleles$both_flip   <- mapply(both_flip,   check_alleles$g1k, check_alleles$geneva, SIMPLIFY = TRUE)
check_alleles$any <- mapply(any, check_alleles$strand_flip, check_alleles$ref_flip, check_alleles$both_flip)
check_alleles <- check_alleles[ check_alleles$any , ]
#replace MAF with 1 - MAF for the ref flipped alleles
change_MAF <- check_alleles$ref_flip | check_alleles$both_flip
check_alleles$geneva_MAF[change_MAF] <- 1 - check_alleles$geneva_MAF[change_MAF]
View(check_alleles)
alleles <- rbind(alleles, check_alleles[c("rsid", "g1k", "geneva", "g1k_MAF", "geneva_MAF", )])
View(alleles)
alleles <- rbind(alleles, check_alleles[c("rsid", "g1k", "geneva", "g1k_MAF", "geneva_MAF")])
delta_MAF <- abs(alleles$g1k_MAF - alleles$geneva_MAF) < 0.05
sum(delta_MAF)
setwd("~/GitHub/R_premim/TrioGenotypes")
Rcpp::compileAttributes()
Rcpp::compileAttributes("./src/")
getwd()
